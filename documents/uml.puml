@startuml uml

App ..> I_O
I_O ...> TournamentsController
I_O ...> TeamsController
I_O ...> PlayersController
I_O ...> AdminsController
I_O .> Authentication
TournamentsController <.> TeamsController
TournamentsController *-- Tournament
Tournament o-- MatchmakingController
MatchmakingController *-- Matchmaking
AdminsController *-- Admin
PlayersController *-- Player
Player o-- Stat
Stat ..> Categories
TeamsController *-- Team
Team o- Player
Tournament o- Participant
Date <- Tournament
Tournament ..> Categories
Team ..|> Participant
Player ..|> Participant
Player --|> User
Admin --|> User
Participant ---* Matchmaking
Validations .> ModelException


class App{
    +inicialitation()
    +main()
}

class User{
    - String username
    - String password
    + void usernameValidate(String) throws ModelException
    + boolean equals(Object)
    + int hashCode()
}

class Player{
    - String name
    - String surname
    - String dni
    - ArrayList<Stat> stats
    - Admin creator
    + Player(String,String,String,String,String,Admin) throws ModelException
    - void dniValidation(String) throws ModelException
    - ArrayList<Stat> initialStats()
    + void showStatsJson()
    + void showStatsCsv()
    + boolean updateStat(String,value)
    + ArrayList<Stat> getStats()
    + String toString()
}

class Admin{
    + Admin(String ,String) throws ModelException
}

class Categories{
    +static String getCategory(String category)
    + static String[] getCategories()
}

class Stat{
    - String category
    - double value
    + Stat(String)
    + String getCategory()
    + void setCategory(String)
    + double getValue()
    + void setValue(double)
    + String toString()
}

class Team{
    - String name
    - ArrayList<Player> players
    - ArrayList<Stat> stats
    - Admin creator
    + Team(String,Admin) throws ModelException
    - ArrayList<Stat> initialStats()
    + void updateStats()
    + String getName()
    + boolean addPlayer(Player)
    + boolean removePlayer(String)
    + boolean equals(Object)
    + int hashCode()
}

class Matchmaking{
    - ArrayList<Participant> participants
    + Matchmaking(Participant, Participant )
    + boolean isMatchmaked(Participant)
}

class Tournament{
    - String name
    - Date startDate
    - Date endDate
    - String league
    - String sport
    - String categoryRank
    - ArrayList<Participant> participants
    - MatchmakingController matchmaking
    + Tournament(String , Date, Date , String , String , String) throws ModelException
    + boolean addParticipant(Participant)
    + boolean removeParticipant(Participant)
    + ArrayList<Participant> getRandomizedParticipants()
    + ArrayList<Participant> getParticipantsRanked()
    + ArrayList<Participant> getParticipants()
    + MatchmakingController getMatchmaking()
}

class AdminsController{
    - static AdminsController uniqueInstance
    - static ArrayList<Admin> admins
    + AdminsController()
    + static Admin getAdmin(String)
    + static AdminsController getInstance()
    + static void addAdmin(Admin admin)
}

class PlayersController{
    - static PlayersController uniqueInstance
    - static ArrayList<Player> players
    + PlayersController()
    + static PlayersController getInstance()
    + static Player getPlayer(String)
    + static boolean createPlayer(String, String, String, String, String, Admin) throws ModelException
    + static boolean deletePlayer(String)
    + static boolean addPoints(String, String, double)
    + static boolean statisticsShow(String)
}

class Authentication{
    - static Authentication uniqueInstance
    - static User currentUser
    - static UserType userType
    + Authentication()
    + static Authentication getInstance()
    + static boolean logIn(String , String)
    + static void logOut()
    + static boolean isLoggedIn()
    + static String getUserType()
    + static User getCurrentUser()

    enum UserType {
        ADMIN, PLAYER
}

class TournamentsController{
    - static TournamentsController uniqueInstance
    - ArrayList<Tournament> tournaments
    + TournamentsController()
    + static TournamentsController getInstance()
    + static boolean deleteTournament(String)
    + static boolean deletePastTournaments()
    + static Tournament isParticipant(Participant)
    + static String listTournaments(String type)
    + static boolean createTournament(String, String, String, String, String , String) throws ModelException
    + static boolean tournamentMatchmakingM(String , String , String)
    + static boolean tournamentMatchmakingA(String)
    + static boolean tournamentAdd(String, String)
    + static boolean tournamentRemove(String, String)
}

class TeamsController{
    - static TeamsController uniqueInstance
    - static ArrayList<Team> teams
    + TeamsController()
    + static TeamsController getInstance()
    + static boolean createTeam(String, Admin) throws ModelException
    + static boolean deleteTeam(String)
    + static Team isInTeam(String)
    + static boolean teamAdd(String, String)
    + static boolean teamRemove(String, String)
}

interface Participant{
    + Stat getStat(String category)
}

class ModelException{
    + ModelException(String message)
}

class Date{
    - int year
    - int month
    - int day
    + Date(int , int , int)
    + Date(String)
    + Date()
    + boolean greaterThan(Date)
    + boolean lowerThan(Date)
    + static boolean isCorrect(String)
    + String toString()
}

class I_O{
    - static final Scanner sc
    + static void initialUsers() throws ModelException
    + static void start()
    + static boolean menu()
    + static void menuAdmin(Authentication)
    + static void menuPlayer(Authentication )
    + static boolean reviewArguments(String[], int)
}

class MatchmakingController{
    - ArrayList<Matchmaking> matchmaking
    + MatchmakingController()
    + boolean createMatchmake(Participant, Participant)
    + boolean randomMatchmake(ArrayList<Participant>)
    + boolean isMatchmaked(Participant)
    + void removeMatchmaking(Participant)
}

class Validations{
    - ArrayList<Matchmaking> matchmaking
    + MatchmakingController()
    + boolean createMatchmake(Participant, Participant)
    + boolean randomMatchmake(ArrayList<Participant>)
    + boolean isMatchmaked(Participant)
    + void removeMatchmaking(Participant)
}

@enduml